@using System.Web.UI.WebControls
@using Microsoft.AspNet.Identity
@if (Request.IsAuthenticated)
{
    using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
    {
    @Html.AntiForgeryToken()

    <ul class="nav navbar-nav navbar-right">
        <li id="pool">
            @{ var isSubscribed = false; }
            @if ((bool)ViewData["isSubscribed"])
            {
                isSubscribed = true;
            }
            <span><a class="btn btn-system" id="unsubscribe" href="#" @(isSubscribed ? "style=display:block" : "style=display:none")>Exit the battle!</a></span>
            <span><a class="btn btn-system" id="subscribe" href="#" @(!isSubscribed ? "style=display:block" : "style=display:none")>Fight now!</a></span>
        </li>
        <li>
            <a href="#">Hello @User.Identity.GetUserName()<b class="caret"></b></a>
            <ul class="dropdown">
                <li role="presentation"> @Html.ActionLink("Profile", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage", role = "menuitem" })</li>
                <li role="presentation"><a role="menuitem" href="javascript:document.getElementById('logoutForm').submit()">Log off</a></li>
            </ul>
        </li>
    </ul>
    }
}
else
{
    <ul class="nav navbar-nav navbar-right">
        <li>@Html.ActionLink("Register", "Register", "Account", routeValues: null, htmlAttributes: new { id = "registerLink" })</li>
        <li>@Html.ActionLink("Log in", "Login", "Account", routeValues: null, htmlAttributes: new { id = "loginLink" })</li>
    </ul>
}
<!--Reference the autogenerated SignalR hub script. -->

    @Scripts.Render("~/Scripts/jquery.signalR-2.2.0.min.js")
    @Scripts.Render("~/signalr/hubs")
<script>
    function toggleSubscribeHeaderButtons() {
        $("#pool #unsubscribe").toggle();
        $("#pool #subscribe").toggle();
    }

    function attachClientPoolEvents(pool) {
        $("#subscribe").click(function() {
            console.log("subscribe clicked");
            pool.server.subscribe().done(function () {
                toggleSubscribeHeaderButtons();
                attachClientPoolEvents(pool);
            });
        });

        $("#unsubscribe").click(function() {
            console.log("unsubs clicked");
            pool.server.unsubscribe().done(function() {
                attachClientPoolEvents(pool);
            });
        });
    }

    $(function() {
        // Reference the auto-generated proxy for the hub.
        var pool = $.connection.poolHub;
        console.log(pool);
        // Create a function that the hub can call back to display messages.
        pool.client.notify = function(playerId) {
            pool.server.checkAvailability(playerId);
        };

        pool.client.startBattle = function(opponentName, battleId) {
            console.log("started");
            battleId = Number(battleId);
            alert("Opponent found " + opponentName);
            var link = "@Url.Action("Duel", "Battle", new {area = "Battles", id = -666})";

            window.location.href = link.replace(-666, battleId);
        };

        pool.client.detach = function () {
            toggleSubscribeHeaderButtons();
        }

        $.connection.hub.start().done(function () {
            pool.server.connect();
            attachClientPoolEvents(pool);
        });
    });

    // This optional function html-encodes messages for display in the page.
    function htmlEncode(value) {
        var encodedValue = $('<div />').text(value).html();
        return encodedValue;
    }
</script>
